@startuml

actor Читатель
actor Библиотекарь
participant Библиотека
participant Книга
participant Повреждение
participant Задолженность


Читатель -> Библиотекарь : Передает книгу для возврата giveBookToReturn(book_id)
Библиотекарь -> Библиотекарь : Проверяет состояние книги checkBookСondition()
alt Книга без повреждений
    Библиотекарь -> Библиотека : Обновить статус книги на "доступна"
    Библиотека -> Книга : updateBookStatus(book_id, "доступна")
    Библиотекарь -> Библиотека : Проверить сроки возврата checkReturnDate(book_id, user_id)
    alt Книга возвращена вовремя
        Библиотека --> Библиотекарь : Возврат вовремя
    else Книга возвращена с просрочкой
        Библиотека --> Библиотекарь : Обнаружена просрочка
        Библиотекарь -> Читатель : Сообщает о просрочке reportOverdue()
        Библиотекарь -> Библиотека : Рассчитать штраф за просрочку calculateOverdueFine(days_overdue)
        Библиотека --> Библиотекарь : Размер штрафа fine_amount
        Библиотекарь -> Читатель : Информирует о штрафе reportFine(fine_amount)
        Библиотекарь -> Задолженность : Добавить штраф в задолженность пользователя addFineToUser(user_id, fine_amount)
    end
else Книга повреждена
    Библиотекарь -> Читатель : Сообщает о повреждениях reportDamage()
    loop Для каждого повреждения 
       Библиотекарь -> Повреждение : создать повреждение damage()
       Библиотекарь -> Книга : addDamage(book_id, damage)
    end
    Библиотекарь -> Библиотека : Рассчитать стоимость повреждений calculateDamageFine(book_id)
    Библиотека --> Библиотекарь : Стоимость повреждений damage_fine
    Библиотекарь -> Читатель : Информирует о штрафе reportDamageFine(fine_amount)
    Библиотекарь -> Библиотека : Обновить статус книги на "повреждена" 
    Библиотека -> Книга : updateBookStatus(book_id, "повреждена")
    Библиотекарь -> Задолженность : Добавить штраф в задолженность пользователя addFineToUser(user_id, damage_fine)
end


@enduml
